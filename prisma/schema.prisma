// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  DRIVER
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  role         Role          @default(USER)
  isSuperAdmin Boolean       @default(false)
  Driver       Driver[]
  Reservation  Reservation[]
  Trip         Trip[]
  image        Image?        @relation(fields: [imageId], references: [id])
  imageId      Int?
}

enum CarStatus {
  OK
  BROKEN
  SOLD
}

enum CarType {
  A
  B
  C1
  C
  D1
  D
}

model Car {
  id          Int           @id @default(autoincrement())
  title       String
  make        String
  model       String
  status      CarStatus     @default(OK)
  type        CarType
  year        Int
  priceForDay Float
  available   Boolean       @default(true)
  Reservation Reservation[]
  Trip        Trip[]
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
}

model Room {
  id            Int           @id @default(autoincrement())
  number        String
  type          RoomType
  pricePerNight Float
  available     Boolean       @default(true)
  Reservation   Reservation[]
}

enum LicenseType {
  A
  B
  C1
  C
  D1
  D
}

model Driver {
  id          Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  license     String
  age         Int
  phoneNumber String
  typeLicense LicenseType

  user   User @relation(fields: [userId], references: [id])
  userId Int

  Reservation Reservation[]
  Trip        Trip[]
  image       Image?        @relation(fields: [imageId], references: [id])
  imageId     Int?
}

enum ReservationStatus {
  Pending
  Confirmed
  Cancelled
}

model Reservation {
  id        Int               @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  status    ReservationStatus // Pending, Confirmed, Cancelled, etc.
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  room      Room              @relation(fields: [roomId], references: [id])
  roomId    Int
  car       Car?              @relation(fields: [carId], references: [id])
  carId     Int?
  driver    Driver?           @relation(fields: [driverId], references: [id])
  driverId  Int?
}

enum TripStatus {
  PENDING
  ACEPTED
  REJECTED
  COMPLETED
}

model Trip {
  id              Int        @id @default(autoincrement())
  destination     String
  startDate       DateTime
  endDate         DateTime
  status          TripStatus
  user            User       @relation(fields: [userId], references: [id])
  userId          Int
  driver          Driver     @relation(fields: [driverId], references: [id])
  driverId        Int
  car             Car        @relation(fields: [carId], references: [id])
  carId           Int
  address_end     Addresses? @relation(name: "address_end", fields: [address_end_id], references: [id], onDelete: SetNull)
  address_end_id  Int?
  address_init    Addresses? @relation(name: "address_init", fields: [address_init_id], references: [id], onDelete: SetNull)
  address_init_id Int?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Addresses   Addresses? @relation(fields: [addressesId], references: [id])
  addressesId Int?
}

model Addresses {
  id                  Int      @id @default(autoincrement())
  street_1            String?
  street_2            String?
  description         String?
  city                String?
  coordinateLatitude  Float?
  coordinateLongitude Float?
  postalCode          String?
  municipalityId      Int?
  provinceId          Int?
  countryId           Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Municipalities Municipalities? @relation(fields: [municipalityId], references: [id], onDelete: SetNull)
  Provinces      Provinces?      @relation(fields: [provinceId], references: [id], onDelete: SetNull)

  trips Trip[]

  TripInit Trip[] @relation(name: "address_init")

  TripEnd Trip[] @relation(name: "address_end")
}

model Municipalities {
  id         Int         @id @default(autoincrement())
  name       String?
  code       String
  provinceId Int?
  createdAt  DateTime
  updatedAt  DateTime
  Addresses  Addresses[]
  Provinces  Provinces?  @relation(fields: [provinceId], references: [id], onDelete: NoAction)
}

model Provinces {
  id             Int              @id @default(autoincrement())
  name           String?
  code           String
  countryId      Int?
  createdAt      DateTime
  updatedAt      DateTime
  Addresses      Addresses[]
  Municipalities Municipalities[]
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String   @unique
  description String?
  User        User[]
  Driver      Driver[]
}
